/*
134. 加油站
中等
相关标签
premium lock icon
相关企业
在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。

你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油
cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。

给定两个整数数组 gas 和 cost
，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1
。如果存在解，则 保证 它是 唯一 的。

示例 1:

输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
输出: 3
解释:
从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
因此，3 可为起始索引。
示例 2:

输入: gas = [2,3,4], cost = [3,4,3]
输出: -1
解释:
你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
因此，无论怎样，你都不可能绕环路行驶一周。

提示:

n == gas.length == cost.length
1 <= n <= 105
0 <= gas[i], cost[i] <= 104
输入保证答案唯一。
*/
#include <vector>
using namespace std;

int canCompleteCircuit(vector<int> &gas, vector<int> &cost) {
    // 初始化起始加油站索引为0
    int start = 0;
    // currentSum 用于记录从当前起点到下一位置的油量盈余
    int currentSum = 0;
    // totalSum 用于记录总的油量盈余
    int totalSum = 0;
    // 遍历每一个加油站
    for (int i = 0; i < gas.size(); i++) {
        // 计算当前位置到下一位置的油量盈余
        currentSum += gas[i] - cost[i]; // 假设从i出发，currentSum是剩余油量
        // 计算总的油量盈余
        totalSum += gas[i] - cost[i]; // 记录总剩余油量。
        // 如果 currentSum 小于0，说明从 start 到 i
        // 之间的任意一个加油站都无法作为起点
        if (currentSum <
            0) { // 若currentSum < 0,则从[0,i
                 // -1]上任意一站出发都不能到达i，并且也不能从i出发。起始位置只能重新从i+1处找。
            // 更新起始加油站为下一个加油站
            start = i + 1;
            // 重置 currentSum
            currentSum = 0;
        }
    }
    // 如果总油量盈余小于0，说明无法绕环一周，返回-1
    if (totalSum < 0)
        return -1; // 如果i遍历完到了最后一站，总剩余油量还是负的，则不可能走一圈。
    // 返回可以绕环一周的起始加油站索引
    return start;
}

// 主函数，程序入口
int main() {
    // 这里没有实际测试代码，仅作为占位
}