/*
55. 跳跃游戏
中等
相关标签
premium lock icon
相关企业
给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。

 

示例 1：

输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
示例 2：

输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。
 

提示：

1 <= nums.length <= 104
0 <= nums[i] <= 105
*/
#include <vector>
/*
如果某一个作为 起跳点 的格子可以跳跃的距离是 3，那么表示后面 3 个格子都可以作为 起跳点
可以对每一个能作为 起跳点 的格子都尝试跳一次，把 能跳到最远的距离 不断更新
如果可以一直跳到最后，就成功了

在每一步中，我们都贪心地选择能到达的最远位置。
这里的局部最优就是：在当前位置i，我们总是选择nums[i] + i（当前位置+跳跃能力）和之前记录的最远位置step中的较大者。
*/
bool canJump(std::vector<int>& nums) {
    int step = 0; // 记录当前能到达的最远位置
    if(nums.size() == 1) return true; // 如果数组只有一个元素，直接返回true
    for(int i = 0;i <= step;i++){ // 遍历从0到当前最远可达位置的每个下标
        step = std::max(nums[i] + i,step); // 更新最远可达位置：当前位置i + 该位置的跳跃能力nums[i]
        if(step >= nums.size() - 1) return true; // 如果最远位置已经能够到达或超过最后一个下标，返回true
    }
    return false; // 如果循环结束仍未到达最后一个下标，返回false
}

int main(){}